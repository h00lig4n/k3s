apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: prometheus
  name: prometheus
  namespace: common
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: prometheus
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - image: prom/prometheus-linux-arm64:main
        imagePullPolicy: IfNotPresent
        name: prometheus
        ports:
          - containerPort: 9090
            protocol: TCP
        readinessProbe:
          httpGet:
            path: /robots.txt
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 2
          failureThreshold: 3
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: 3000
          timeoutSeconds: 1
        env:
          - name: GF_SECURITY_ADMIN_USER
            valueFrom:
              secretKeyRef:
                name: grafana
                key: username
          - name: GF_SECURITY_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: grafana
                key: password
          - name: GF_RENDERING_SERVER_URL
            value: http://localhost:8081/render
          - name: GF_RENDERING_CALLBACK_URL
            value: http://localhost:3000/
          - name: GF_LOG_FILTERS
            value: rendering:debug     
          - name: GF_SECURITY_ALLOW_EMBEDDING
            value: "true"
        volumeMounts:
          - name: configuration
            mountPath: /etc/prometheus/prometheus.yml
        resources:
          requests:
            memory: "128Mi"
            cpu: "250m"
          limits:
            memory: "1024Mi"
            cpu: "500m"
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      nodeSelector:
        node-role.kubernetes.io/worker: "true"
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: prometheus-pvc
          persistentVolumeClaim:
            claimName: prometheus
        - name: configuration
          configMap:
            name: prometheus
